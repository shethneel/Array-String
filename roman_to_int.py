# -*- coding: utf-8 -*-
"""Roman to int.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UFYFG4l-qZC6H1GhwLgroNnGp8P7B7xB

Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}

For example, 2 is written as II in Roman numeral, just two ones added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.

Roman numerals are usually written largest to smallest from left to right.

However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9.

X can be placed before L (50) and C (100) to make 40 and 90.

C can be placed before D (500) and M (1000) to make 400 and 900.

Given a roman numeral, convert it to an integer.



Example 1:

Input: s = "III"

Output: 3

Explanation:

III = 3.

Example 2:

Input: s = "LVIII"

Output: 58

Explanation:

 L = 50, V= 5, III = 3.

Example 3:

Input: s = "MCMXCIV"

Output: 1994

Explanation:

 M = 1000, CM = 900, XC = 90 and IV = 4.
"""

Roman = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}

s = 'MCMXCIV'

s = list(s)

s

ans = Roman[s[0]]

for i in range(1, len(s)):

  if Roman[s[i]] > Roman[s[i-1]]:
    ans = ans + Roman[s[i]] - 2*Roman[s[i-1]]

  else:
    ans = ans + Roman[s[i]]

ans

"""Certainly! The given code is a Python implementation of a solution to convert a Roman numeral string to an integer. Let's break down the logic step by step:

1. A class named `Solution` is defined, and it contains a method `romanToInt` that takes a Roman numeral string `s` as input and returns an integer.

2. The `Roman` dictionary is defined, mapping each Roman numeral character to its corresponding integer value.

3. The input Roman numeral string `s` is converted to a list of characters using `s = list(s)`.

4. The variable `ans` is initialized with the integer value of the first Roman numeral character in the string (i.e., `Roman[s[0]]`).

5. The main logic for converting the Roman numeral string to an integer is implemented in a loop that iterates through the characters of the string, starting from the second character (`range(1, len(s))`).

6. Inside the loop, there is a conditional check to determine whether the current Roman numeral character has a greater value than the previous one. If `Roman[s[i]] > Roman[s[i-1]]`, it means subtraction is needed.

7. If subtraction is needed, the value of the current Roman numeral character is added to `ans`, and the value of two times the previous Roman numeral character is subtracted from it. This step is necessary because the previous character's value was added in the previous iteration, and for correct conversion, it needs to be subtracted twice.

8. If no subtraction is needed, the value of the current Roman numeral character is simply added to `ans`.

9. After processing all characters in the Roman numeral string, the final result is stored in `ans`, and it is returned as the output of the `romanToInt` method.

Let's go through an example to illustrate the logic:

```python
s = "MCMXCIV"
# M = 1000, CM = 900, XC = 90, IV = 4
# Total = 1000 + (900 - 2*100) + (90 - 2*10) + (4 - 2*1) = 1994
# Output: 1994
```

The code efficiently handles the special cases where subtraction is required in Roman numerals.
"""