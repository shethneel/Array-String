# -*- coding: utf-8 -*-
"""Candies.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UFYFG4l-qZC6H1GhwLgroNnGp8P7B7xB

There are n children standing in a line. Each child is assigned a rating value given in the integer array ratings.

You are giving candies to these children subjected to the following requirements:

1. Each child must have at least one candy.

2. Children with a higher rating get more candies than their neighbors.
Return the minimum number of candies you need to have to distribute the candies to the children.



Example 1:

Input: ratings = [1,0,2]

Output: 5

Explanation:

You can allocate to the first, second and third child with 2, 1, 2 candies respectively.

Example 2:

Input: ratings = [1,2,2]

Output: 4

Explanation:

You can allocate to the first, second and third child with 1, 2, 1 candies respectively.

The third child gets 1 candy because it satisfies the above two conditions.
"""

rat = [1,0,2]

can = [1]*len(rat)

n = len(rat)

for i in range(1,n):
# We are starting with index 1 as there is no left element for index 0

  if rat[i]>rat[i-1]:
  # Here, we are comparing it with i-1 as we want to compare them with left element

    can[i] = can[i-1] +1

# Now, we are done with whole array from the left side, now we have to compare it with the right side

for i in range (n-2,-1,-1):
# We are doing it with n-2 as n-1 will be the last element so n-2 will be the second last and we are going till the 0th element.

  if rat[i] > rat[i+1]:
   # Here, we are comparing it with i+1 as we want to compare them with right element

    can[i] = can[i+1]+1

can

sum(can)

"""The given code is an implementation of a solution to the candy distribution problem. The problem involves distributing candies to children based on their ratings, satisfying the following conditions:

1. Each child must have at least one candy.
2. Children with a higher rating should receive more candies than their neighbors.

Here's an explanation of the solution's logic:

1. **Initialization:**
   - `n`: Number of children (length of the ratings array).
   - `candies`: An array to store the number of candies for each child, initialized with 1 candy for each child.

   ```python
   n = len(ratings)
   candies = [1] * n
   ```

2. **Left-to-Right Pass:**
   - Iterate from left to right over the ratings array.
   - If the current child has a higher rating than the previous one, increment the number of candies for the current child compared to the previous one.

   ```python
   for i in range(1, n):
       if ratings[i] > ratings[i - 1]:
           candies[i] = candies[i - 1] + 1
   ```

   This ensures that if a child has a higher rating than the one on their left, they get more candies.

3. **Right-to-Left Pass:**
   - Iterate from right to left over the ratings array.
   - If the current child has a higher rating than the next one, update the number of candies for the current child to the maximum of its current value and the next child's candies plus one.

   ```python
   for i in range(n - 2, -1, -1):
       if ratings[i] > ratings[i + 1]:
           candies[i] = max(candies[i], candies[i + 1] + 1)
   ```

   This ensures that if a child has a higher rating than the one on their right, they get more candies.

4. **Result:**
   - The final `candies` array represents the minimum number of candies needed to satisfy the given conditions.
   - Return the sum of the `candies` array as the result.

   ```python
   return sum(candies)
   ```

   The sum of the `candies` array gives the total minimum number of candies needed to distribute among the children while satisfying the conditions.
"""