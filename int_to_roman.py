# -*- coding: utf-8 -*-
"""int to roman.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UFYFG4l-qZC6H1GhwLgroNnGp8P7B7xB

Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.

Roman = {1 : 'I', 4: 'IV', 5 : 'V', 9: 'IX', 10 : 'X', 40: 'XL', 50 : 'L', 90: 'XC', 100 : 'C', 400: 'CD', 500 : 'D', 900: 'CM', 1000 : 'M'}


For example, 2 is written as II in Roman numeral, just two one's added together. 12 is written as XII, which is simply X + II. The number 27 is written as XXVII, which is XX + V + II.


Roman numerals are usually written largest to smallest from left to right.

 However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:

I can be placed before V (5) and X (10) to make 4 and 9.

X can be placed before L (50) and C (100) to make 40 and 90.

C can be placed before D (500) and M (1000) to make 400 and 900.

Given an integer, convert it to a roman numeral.



Example 1:

Input: num = 3

Output: "III"

Explanation: 3 is represented as 3 ones.

Example 2:

Input: num = 58

Output: "LVIII"

Explanation: L = 50, V = 5, III = 3.

Example 3:

Input: num = 1994

Output: "MCMXCIV"

Explanation: M = 1000, CM = 900, XC = 90 and IV = 4.
"""

Roman = {1 : 'I', 4: 'IV', 5 : 'V', 9: 'IX', 10 : 'X', 40: 'XL', 50 : 'L', 90: 'XC', 100 : 'C', 400: 'CD', 500 : 'D', 900: 'CM', 1000 : 'M'}

k = list(Roman.keys())
k.reverse()

s = 29
ans = ""

for i in k:
    while s >= i:
        ans += Roman[i]
        s -= i

print("Roman numeral:", ans)

"""The solution provided converts an integer to a Roman numeral according to the rules specified in the problem statement. It utilizes a list of tuples, where each tuple contains a value and its corresponding Roman numeral representation. This list is arranged in descending order of values.

Here's the logic breakdown of the solution:

1. **Initialize Variables**:
   - `s`: Represents the input integer to be converted to a Roman numeral.
   - `ans`: Holds the resultant Roman numeral string.

2. **Iterate Through Roman Numeral Values**:
   - The solution iterates through each tuple in the `Roman` list.
   - For each tuple, it extracts the `value` and `numeral`.
   - It then enters a loop to repeatedly append the `numeral` to the `ans` string while `s` is greater than or equal to the current `value`.
   - Inside the loop, it subtracts the `value` from `s` with each iteration.

3. **Construct Roman Numeral**:
   - By appending the corresponding `numeral` in each iteration of the loop, the solution constructs the Roman numeral representation of the input integer.

4. **Output Result**:
   - Once the loop finishes, the `ans` string holds the complete Roman numeral representation of the input integer.
   - The solution then prints out this Roman numeral.

This approach ensures that the Roman numeral representation is constructed correctly according to the rules specified in the problem statement, including the special cases where subtraction is used to represent certain numbers.
"""