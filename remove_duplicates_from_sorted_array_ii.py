# -*- coding: utf-8 -*-
"""Remove Duplicates from Sorted Array II.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y_DwxCl3cPEYaaDMdoqc2-DjhmNwXotD

Given an integer array nums sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.

Input
nums =
[1,1,1,2,2,3] <br>
Output
[1,1,2,2,3]
"""

l = [3,3,5,5,6,6,6,6,8,8,8,8,4,4,4,4]

max = 2

count = {}
i = 0

while i<len(l):
  temp = l[i]

  if temp not in count:
    count[temp] = 1
  else:
    count[temp] +=1

  if count[temp]>max:
    del l[i]
  else:
    i+=1

l

"""Intuition
To write easy solution

Approach
First we are going to define dictionary to keep eye on the couunt of every element

initialize i=0 for iterator

and max occurrence to 2

In the loop, we will allocate element to temporary variable\

That variable will check whether it occured before or not

If it does then count will be increased to +1

If it doesn't, count will be set to 1

Also last if condition will check that occurence won't increase max count

If it does, it will delete that element

If it doesn't then iterator will increase the count

Complexity
Time complexity:O(n^2) <br>
Space complexity:O(n)
"""