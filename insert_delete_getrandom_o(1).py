# -*- coding: utf-8 -*-
"""Insert Delete GetRandom O(1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UFYFG4l-qZC6H1GhwLgroNnGp8P7B7xB

Problem Explanation:

The problem is to implement a data structure that supports three operations—insert, remove, and getRandom—with each operation working in average O(1) time complexity.

Implement the RandomizedSet class:

RandomizedSet() Initializes the RandomizedSet object.

bool insert(int val) Inserts an item val into the set if not present. Returns true if the item was not present, false otherwise.

bool remove(int val) Removes an item val from the set if present. Returns true if the item was present, false otherwise.

int getRandom() Returns a random element from the current set of elements (it's guaranteed that at least one element exists when this method is called). Each element must have the same probability of being returned.

You must implement the functions of the class such that each function works in average O(1) time complexity.



Example 1:

Input

["RandomizedSet", "insert", "remove", "insert", "getRandom", "remove", "insert", "getRandom"]

[[], [1], [2], [2], [], [1], [2], []]

Output

[null, true, false, true, 2, true, false, 2]
"""

import random

class RandomizedSet:

    def __init__(self):
        # Initialize an empty list to store elements and a dictionary for quick lookup
        self.elements = []  # List to store elements
        self.ind = {}       # Dictionary for quick lookup of element indices

    def insert(self, val: int) -> bool:
        # Check if val is already present in the set
        if val in self.elements:
            return False
        else:
            # Append the element to the list
            self.elements.append(val)
            # Update the dictionary with the index of the new element
            self.ind[val] = len(self.elements) - 1
            return True

    def remove(self, val: int) -> bool:
        # Check if val is present in the set
        if val not in self.elements:
            return False

        # Swap the element to be removed with the last element
        last_element = self.elements[-1]
        index_to_remove = self.ind[val]

        self.elements[index_to_remove] = last_element
        self.ind[last_element] = index_to_remove

        # Remove the last element and its index from the dictionary
        self.elements.pop()
        del self.ind[val]
        return True

    def getRandom(self) -> int:
        # Return a random element from the set
        return random.choice(self.elements)

# Your RandomizedSet object will be instantiated and called as such:
# obj = RandomizedSet()
# param_1 = obj.insert(val)
# param_2 = obj.remove(val)
# param_3 = obj.getRandom()

"""**Problem Explanation:**
The problem is to implement a data structure that supports three operations—`insert`, `remove`, and `getRandom`—with each operation working in average O(1) time complexity.

**Solution Explanation:**
1. **Initialization (`__init__`):** Initializes the data structure with an empty list (`elements`) to store elements and a dictionary (`ind`) for quick lookup of element indices.

2. **Insert Operation (`insert`):** Inserts an element into the set if it is not already present. Returns `True` if the element was inserted successfully, and `False` otherwise.

3. **Remove Operation (`remove`):** Removes an element from the set if it is present. Returns `True` if the element was removed successfully, and `False` otherwise.

4. **Get Random Operation (`getRandom`):** Returns a random element from the set. Each element has an equal probability of being returned.

**Example:**
Let's demonstrate the operations using the following code:

```python
randomizedSet = RandomizedSet()
print(randomizedSet.insert(1))    # True
print(randomizedSet.remove(2))    # False
print(randomizedSet.insert(2))    # True
print(randomizedSet.getRandom())  # Returns either 1 or 2 randomly
print(randomizedSet.remove(1))    # True
print(randomizedSet.insert(2))    # False
print(randomizedSet.getRandom())  # Returns 2
```

This code initializes a `RandomizedSet`, performs various insertions, removals, and retrieves random elements. The comments in the code explain each line's purpose and functionality.
"""

