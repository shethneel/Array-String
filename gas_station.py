# -*- coding: utf-8 -*-
"""Gas_Station.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1UFYFG4l-qZC6H1GhwLgroNnGp8P7B7xB

There are n gas stations along a circular route, where the amount of gas at the ith station is gas[i].

You have a car with an unlimited gas tank and it costs cost[i] of gas to travel from the ith station to its next (i + 1)th station. You begin the journey with an empty tank at one of the gas stations.

Given two integer arrays gas and cost, return the starting gas station's index if you can travel around the circuit once in the clockwise direction, otherwise return -1. If there exists a solution, it is guaranteed to be unique



Example 1:

Input: gas = [1,2,3,4,5], cost = [3,4,5,1,2]

Output: 3

Explanation:

Start at station 3 (index 3) and fill up with 4 unit of gas. Your tank = 0 + 4 = 4

Travel to station 4. Your tank = 4 - 1 + 5 = 8

Travel to station 0. Your tank = 8 - 2 + 1 = 7

Travel to station 1. Your tank = 7 - 3 + 2 = 6

Travel to station 2. Your tank = 6 - 4 + 3 = 5

Travel to station 3. The cost is 5. Your gas is just enough to travel back to station 3.
Therefore, return 3 as the starting index.

Example 2:

Input: gas = [2,3,4], cost = [3,4,3]

Output: -1

Explanation:

You can't start at station 0 or 1, as there is not enough gas to travel to the next station.

Let's start at station 2 and fill up with 4 unit of gas. Your tank = 0 + 4 = 4

Travel to station 0. Your tank = 4 - 3 + 2 = 3

Travel to station 1. Your tank = 3 - 3 + 3 = 3

You cannot travel back to station 2, as it requires 4 unit of gas but you only have 3.

Therefore, you can't travel around the circuit once no matter where you start.
"""

gas = [1,2,3,4,5]
cost = [3,4,5,1,2]

total_gas = sum(gas)
total_cost = sum(cost)

if total_gas < total_cost:
    print ('-1')

tank = 0
start = 0

for i in range(len(gas)):
  tank = tank + gas[i] - cost[i]
  if tank < 0:
    start = i+1
    tank = 0

print (start) if start<len(gas) else print ('-1')

"""The given code is an implementation of a solution to the gas station problem. The problem involves finding a valid starting gas station index from which you can travel around a circular route, given the amount of gas at each station and the cost to travel from one station to the next.

Here's the explanation of the solution's logic:

1. Calculate the total gas and total cost for the entire circular route.

   ```python
   total_gas = sum(gas)
   total_cost = sum(cost)
   ```

   If the total gas is less than the total cost, it means there is not enough gas to cover the entire route, and the solution is not possible. In such cases, the code prints -1 and exits.

   ```python
   if total_gas < total_cost:
       print ('-1')
   ```

2. Initialize variables `tank` to keep track of the current gas in the tank and `start` to keep track of the potential starting gas station index.

   ```python
   tank = 0
   start = 0
   ```

3. Iterate through the gas stations using a loop.

   ```python
   for i in range(len(gas)):
   ```

4. Update the `tank` by adding the gas at the current station and subtracting the cost to travel to the next station.

   ```python
   tank = tank + gas[i] - cost[i]
   ```

5. Check if the `tank` becomes negative. If it does, update the `start` index to the next station, and reset the `tank` to zero.

   ```python
   if tank < 0:
       start = i+1
       tank = 0
   ```

6. After the loop, check if the final `start` index is within the valid range of gas stations. If it is, print the `start` index; otherwise, print -1.

   ```python
   print (start) if start < len(gas) else print ('-1')
   ```

The logic is based on the observation that if there exists a solution, the starting gas station must be after the station where the `tank` becomes negative. This is because starting before that station would result in the `tank` being negative at that station. The loop continues until all gas stations are visited, and the final `start` index represents a valid starting gas station for a complete circular route.
"""